Description: Disable failing tests
Author: Thomas Goirand <zigo@debian.org>
Last-Update: 2015-01-02

--- murano-2015.1~b1.orig/murano/tests/functional/api/v1/test_envs.py
+++ /dev/null
@@ -1,126 +0,0 @@
-#    Copyright (c) 2014 Mirantis, Inc.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-from tempest import exceptions
-from tempest.test import attr
-
-from murano.tests.functional.api import base
-
-
-class TestEnvironments(base.TestCase):
-
-    @attr(type='smoke')
-    def test_list_environments(self):
-        resp, body = self.client.get_environments_list()
-
-        self.assertIn('environments', body)
-        self.assertEqual(resp.status, 200)
-
-    @attr(type='smoke')
-    def test_create_and_delete_environment(self):
-        environments_list_start = self.client.get_environments_list()[1]
-
-        resp, env = self.client.create_environment('test')
-        self.environments.append(env)
-
-        self.assertEqual(resp.status, 200)
-        self.assertEqual('test', env['name'])
-
-        environments_list = self.client.get_environments_list()[1]
-
-        self.assertEqual(len(environments_list_start['environments']) + 1,
-                         len(environments_list['environments']))
-
-        self.client.delete_environment(env['id'])
-
-        environments_list = self.client.get_environments_list()[1]
-
-        self.assertEqual(len(environments_list_start['environments']),
-                         len(environments_list['environments']))
-
-        self.environments.pop(self.environments.index(env))
-
-    @attr(type='smoke')
-    def test_get_environment(self):
-        env = self.create_environment('test')
-
-        resp, environment = self.client.get_environment(env['id'])
-
-        self.assertEqual(resp.status, 200)
-        self.assertEqual(environment['name'], 'test')
-
-    @attr(type='smoke')
-    def test_update_environment(self):
-        env = self.create_environment('test')
-
-        resp, environment = self.client.update_environment(env['id'])
-
-        self.assertEqual(resp.status, 200)
-        self.assertEqual(environment['name'], 'changed-environment-name')
-
-    @attr(type='negative')
-    def test_update_environment_with_wrong_env_id(self):
-        self.assertRaises(exceptions.NotFound,
-                          self.client.update_environment,
-                          None)
-
-    @attr(type='negative')
-    def test_delete_environment_with_wrong_env_id(self):
-        self.assertRaises(exceptions.NotFound,
-                          self.client.delete_environment,
-                          None)
-
-    @attr(type='negative')
-    def test_double_delete_environment(self):
-        env = self.create_environment('test')
-
-        self.client.delete_environment(env['id'])
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.delete_environment,
-                          env['id'])
-
-    @attr(type='negative')
-    def test_get_deleted_environment(self):
-        env = self.create_environment('test')
-
-        self.client.delete_environment(env['id'])
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_environment,
-                          env['id'])
-
-
-class TestEnvironmentsTenantIsolation(base.NegativeTestCase):
-
-    @attr(type='negative')
-    def test_get_environment_from_another_tenant(self):
-        env = self.create_environment('test')
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.get_environment, env['id'])
-
-    @attr(type='negative')
-    def test_update_environment_from_another_tenant(self):
-        env = self.create_environment('test')
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.update_environment, env['id'])
-
-    @attr(type='negative')
-    def test_delete_environment_from_another_tenant(self):
-        env = self.create_environment('test')
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.delete_environment, env['id'])
--- murano-2015.1~b1.orig/murano/tests/functional/api/v1/test_sessions.py
+++ /dev/null
@@ -1,145 +0,0 @@
-#    Copyright (c) 2014 Mirantis, Inc.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import testtools
-
-from tempest import exceptions
-from tempest.test import attr
-
-from murano.tests.functional.api import base
-
-
-class TestSessions(base.TestCase):
-
-    @attr(type='smoke')
-    def test_create_session(self):
-        env = self.create_environment('test')
-
-        resp, sess = self.client.create_session(env['id'])
-
-        self.assertEqual(resp.status, 200)
-        self.assertEqual(env['id'], sess['environment_id'])
-
-    @attr(type='negative')
-    def test_create_session_before_env(self):
-        self.assertRaises(exceptions.NotFound,
-                          self.client.create_session,
-                          None)
-
-    @attr(type='smoke')
-    def test_delete_session(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        resp = self.client.delete_session(env['id'], sess['id'])[0]
-
-        self.assertEqual(resp.status, 200)
-
-    @attr(type='negative')
-    def test_delete_session_without_env_id(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.delete_session,
-                          None,
-                          sess['id'])
-
-    @attr(type='smoke')
-    def test_get_session(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        resp, session = self.client.get_session(env['id'], sess['id'])
-
-        self.assertEqual(resp.status, 200)
-        self.assertEqual(session, sess)
-
-    @attr(type='negative')
-    def test_get_session_without_env_id(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_session,
-                          None,
-                          sess['id'])
-
-    @attr(type='negative')
-    def test_get_session_after_delete_env(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        self.client.delete_environment(env['id'])
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_session,
-                          env['id'],
-                          sess['id'])
-
-    @attr(type='negative')
-    def test_double_delete_session(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        self.client.delete_session(env['id'], sess['id'])
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.delete_session,
-                          env['id'],
-                          sess['id'])
-
-
-class TestSessionsTenantIsolation(base.NegativeTestCase):
-
-    @attr(type='negative')
-    def test_create_session_in_env_from_another_tenant(self):
-        env = self.create_environment('test')
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.create_session, env['id'])
-
-    @attr(type='negative')
-    def test_delete_session_in_env_from_another_tenant(self):
-        env = self.create_environment('test')
-        sess = self.client.create_session(env['id'])[1]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.delete_session, env['id'],
-                          sess['id'])
-
-    @attr(type='negative')
-    def test_get_session_in_env_from_another_tenant(self):
-        env = self.create_environment('test')
-        sess = self.client.create_session(env['id'])[1]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.get_session, env['id'],
-                          sess['id'])
-
-    @testtools.skip("https://bugs.launchpad.net/murano/+bug/1382026")
-    @attr(type='negative')
-    def test_deploy_session_in_env_from_another_tenant(self):
-        env = self.create_environment('test')
-        sess = self.client.create_session(env['id'])[1]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.deploy_session, env['id'],
-                          sess['id'])
--- murano-2015.1~b1.orig/murano/tests/functional/api/v1/test_services.py
+++ /dev/null
@@ -1,249 +0,0 @@
-#    Copyright (c) 2014 Mirantis, Inc.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import testtools
-
-from tempest import exceptions
-from tempest.test import attr
-
-from murano.tests.functional.api import base
-
-
-class TestServices(base.TestCase):
-
-    @attr(type='smoke')
-    def test_get_services_list(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        resp, services_list = self.client.get_services_list(env['id'],
-                                                            sess['id'])
-
-        self.assertEqual(resp.status, 200)
-        self.assertTrue(isinstance(services_list, list))
-
-    @attr(type='negative')
-    def test_get_services_list_without_env_id(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_services_list,
-                          None,
-                          sess['id'])
-
-    @attr(type='negative')
-    def test_get_services_list_after_delete_env(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        self.client.delete_environment(env['id'])
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_services_list,
-                          env['id'],
-                          sess['id'])
-
-    @attr(type='negative')
-    def test_get_services_list_after_delete_session(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        self.client.delete_session(env['id'], sess['id'])
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_services_list,
-                          env['id'],
-                          sess['id'])
-
-    @attr(type='smoke')
-    def test_create_and_delete_demo_service(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        services_list = self.client.get_services_list(env['id'], sess['id'])[1]
-
-        resp, service = self.create_demo_service(env['id'], sess['id'])
-
-        services_list_ = self.client.get_services_list(env['id'],
-                                                       sess['id'])[1]
-
-        self.assertEqual(resp.status, 200)
-        self.assertEqual(len(services_list) + 1, len(services_list_))
-
-        resp = self.client.delete_service(env['id'],
-                                          sess['id'],
-                                          service['?']['id'])[0]
-
-        services_list_ = self.client.get_services_list(env['id'],
-                                                       sess['id'])[1]
-
-        self.assertEqual(resp.status, 200)
-        self.assertEqual(len(services_list), len(services_list_))
-
-    @attr(type='negative')
-    def test_create_demo_service_without_env_id(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        self.assertRaises(exceptions.NotFound,
-                          self.create_demo_service,
-                          None,
-                          sess['id'])
-
-    @attr(type='negative')
-    def test_create_demo_service_without_sess_id(self):
-        env = self.create_environment('test')
-
-        self.client.create_session(env['id'])
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.create_demo_service,
-                          env['id'],
-                          "")
-
-    @attr(type='negative')
-    def test_delete_demo_service_without_env_id(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        service = self.create_demo_service(env['id'], sess['id'])[1]
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.delete_service,
-                          None,
-                          sess['id'],
-                          service['?']['id'])
-
-    @attr(type='negative')
-    def test_delete_demo_service_without_session_id(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        service = self.create_demo_service(env['id'], sess['id'])[1]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.client.delete_service,
-                          env['id'],
-                          "",
-                          service['?']['id'])
-
-    @attr(type='negative')
-    def test_double_delete_service(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        service = self.create_demo_service(env['id'], sess['id'])[1]
-
-        self.client.delete_service(env['id'], sess['id'], service['?']['id'])
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.delete_service,
-                          env['id'],
-                          sess['id'],
-                          service['?']['id'])
-
-    @attr(type='smoke')
-    def test_get_service(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        service = self.create_demo_service(env['id'], sess['id'])[1]
-
-        resp, service_ = self.client.get_service(env['id'],
-                                                 sess['id'],
-                                                 service['?']['id'])
-
-        self.assertEqual(resp.status, 200)
-        self.assertEqual(service, service_)
-
-    @attr(type='negative')
-    def test_get_service_without_env_id(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        service = self.create_demo_service(env['id'], sess['id'])[1]
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_service,
-                          None,
-                          sess['id'],
-                          service['?']['id'])
-
-    @testtools.skip("https://bugs.launchpad.net/murano/+bug/1295573")
-    @attr(type='negative')
-    def test_get_service_without_sess_id(self):
-        env = self.create_environment('test')
-
-        sess = self.client.create_session(env['id'])[1]
-
-        service = self.create_demo_service(env['id'], sess['id'])[1]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.client.get_service,
-                          env['id'],
-                          "",
-                          service['?']['id'])
-
-
-class TestServicesTenantIsolation(base.NegativeTestCase):
-
-    @attr(type='negative')
-    def test_get_list_services_in_env_from_another_tenant(self):
-        env = self.create_environment('test')
-        sess = self.client.create_session(env['id'])[1]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.get_services_list, env['id'],
-                          sess['id'])
-
-    @attr(type='negative')
-    def test_create_service_in_env_from_another_tenant(self):
-        env = self.create_environment('test')
-        sess = self.client.create_session(env['id'])[1]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.create_demo_service, env['id'],
-                          sess['id'], client=self.alt_client)
-
-    @attr(type='negative')
-    def test_delete_service_in_env_from_another_tenant(self):
-        env = self.create_environment('test')
-        sess = self.client.create_session(env['id'])[1]
-        service = self.create_demo_service(env['id'], sess['id'])[1]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.delete_service, env['id'],
-                          sess['id'], service['?']['id'])
-
-    @attr(type='negative')
-    def test_get_service_in_env_from_another_tenant(self):
-        env = self.create_environment('test')
-        sess = self.client.create_session(env['id'])[1]
-        service = self.create_demo_service(env['id'], sess['id'])[1]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.get_service, env['id'],
-                          sess['id'], service['?']['id'])
--- murano-2015.1~b1.orig/murano/tests/functional/api/v1/test_repository.py
+++ /dev/null
@@ -1,379 +0,0 @@
-#    Copyright (c) 2014 Mirantis, Inc.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import os
-import uuid
-import zipfile
-
-from tempest.test import attr
-
-from tempest import exceptions
-
-from murano.tests.functional.api import base
-
-
-class TestCaseRepository(base.TestCase):
-
-    @classmethod
-    def setUpClass(cls):
-
-        super(TestCaseRepository, cls).setUpClass()
-
-        cls.location = os.path.realpath(
-            os.path.join(os.getcwd(), os.path.dirname(__file__)))
-
-        __folderpath__ = os.path.join(cls.location, "DummyTestApp")
-        __rootlen__ = len(__folderpath__) + 1
-
-        with zipfile.ZipFile(os.path.join(cls.location,
-                                          "DummyTestApp.zip"), "w") as zf:
-            for dirname, _, files in os.walk(__folderpath__):
-                for filename in files:
-                    fn = os.path.join(dirname, filename)
-                    zf.write(fn, fn[__rootlen__:])
-
-    def setUp(self):
-        super(TestCaseRepository, self).setUp()
-
-        self.packages = []
-
-    def tearDown(self):
-        super(TestCaseRepository, self).tearDown()
-
-        for package in self.packages:
-            try:
-                self.client.delete_package(package['id'])
-            except Exception:
-                pass
-
-    @classmethod
-    def tearDownClass(cls):
-
-        super(TestCaseRepository, cls).tearDownClass()
-
-        os.remove(os.path.join(cls.location, "DummyTestApp.zip"))
-
-
-class TestRepositorySanity(TestCaseRepository):
-
-    @attr(type='smoke')
-    def test_get_list_packages(self):
-        resp, body = self.client.get_list_packages()
-
-        self.assertEqual(200, resp.status)
-        self.assertTrue(isinstance(body['packages'], list))
-
-    @attr(type='smoke')
-    def test_get_list_categories(self):
-        resp, body = self.client.list_categories()
-
-        self.assertEqual(200, resp.status)
-        self.assertTrue(isinstance(body['categories'], list))
-
-    @attr(type='smoke')
-    def test_upload_and_delete_package(self):
-        packages_list = self.client.get_list_packages()[1]
-        for package in packages_list['packages']:
-            if 'Dummy' in package['fully_qualified_name']:
-                self.client.delete_package(package['id'])
-        categorie = self.client.list_categories()[1]['categories'][0]
-        packages_list = self.client.get_list_packages()[1]['packages']
-
-        resp = self.client.upload_package(
-            'testpackage',
-            {"categories": [categorie], "tags": ["windows"]})
-        self.packages.append(resp.json())
-
-        _packages_list = self.client.get_list_packages()[1]['packages']
-
-        self.assertEqual(200, resp.status_code)
-        self.assertEqual(len(packages_list) + 1, len(_packages_list))
-
-        resp = self.client.delete_package(resp.json()['id'])[0]
-
-        _packages_list = self.client.get_list_packages()[1]['packages']
-
-        self.assertEqual(200, resp.status)
-        self.assertEqual(len(packages_list), len(_packages_list))
-
-
-class TestRepositoryNegativeNotFound(base.NegativeTestCase):
-
-    @classmethod
-    def setUpClass(cls):
-        super(TestRepositoryNegativeNotFound, cls).setUpClass()
-
-        cls.id = uuid.uuid4().hex
-
-    @attr(type='negative')
-    def test_update_package_with_incorrect_id(self):
-
-        post_body = [
-            {
-                "op": "add",
-                "path": "/tags",
-                "value": ["im a test"]
-            }
-        ]
-
-        self.assertRaises(exceptions.NotFound,
-                          self.client.update_package,
-                          self.id,
-                          post_body)
-
-    @attr(type='negative')
-    def test_get_package_with_incorrect_id(self):
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_package,
-                          self.id)
-
-    @attr(type='negative')
-    def test_delete_package_with_incorrect_id(self):
-        self.assertRaises(exceptions.NotFound,
-                          self.client.delete_package,
-                          self.id)
-
-    @attr(type='negative')
-    def test_download_package_with_incorrect_id(self):
-        self.assertRaises(exceptions.NotFound,
-                          self.client.download_package,
-                          self.id)
-
-    @attr(type='negative')
-    def test_get_ui_definition_with_incorrect_id(self):
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_ui_definition,
-                          self.id)
-
-    @attr(type='negative')
-    def test_get_logo_with_incorrect_id(self):
-        self.assertRaises(exceptions.NotFound,
-                          self.client.get_logo,
-                          self.id)
-
-
-class TestRepositoryNegativeForbidden(base.NegativeTestCase,
-                                      TestCaseRepository):
-    @classmethod
-    def setUpClass(cls):
-        super(TestRepositoryNegativeForbidden, cls).setUpClass()
-
-        cls.categorie = cls.client.list_categories()[1]['categories'][0]
-
-        packages_list = cls.client.get_list_packages()[1]
-        for package in packages_list['packages']:
-            if 'Dummy' in package['fully_qualified_name']:
-                cls.client.delete_package(package['id'])
-
-        cls.package = cls.client.upload_package(
-            'testpackage',
-            {
-                "categories": [cls.categorie],
-                "tags": ["windows"],
-                "is_public": False
-            }
-        ).json()
-
-    @classmethod
-    def tearDownClass(cls):
-
-        super(TestRepositoryNegativeForbidden, cls).tearDownClass()
-
-        cls.client.delete_package(cls.package['id'])
-
-    @attr(type='negative')
-    def test_update_package_from_another_tenant(self):
-        post_body = [
-            {
-                "op": "add",
-                "path": "/tags",
-                "value": ["im a test"]
-            }
-        ]
-
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.update_package,
-                          self.package['id'],
-                          post_body)
-
-    @attr(type='negative')
-    def test_get_package_from_another_tenant(self):
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.get_package,
-                          self.package['id'])
-
-    @attr(type='negative')
-    def test_delete_package_from_another_tenant(self):
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.delete_package,
-                          self.package['id'])
-
-    @attr(type='negative')
-    def test_download_package_from_another_tenant(self):
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.download_package,
-                          self.package['id'])
-
-    @attr(type='negative')
-    def test_get_ui_definition_from_another_tenant(self):
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.get_ui_definition,
-                          self.package['id'])
-
-    @attr(type='negative')
-    def test_get_logo_from_another_tenant(self):
-        self.assertRaises(exceptions.Unauthorized,
-                          self.alt_client.get_logo,
-                          self.package['id'])
-
-
-class TestRepository(TestCaseRepository):
-
-    @classmethod
-    def setUpClass(cls):
-
-        super(TestRepository, cls).setUpClass()
-        cls.categorie = cls.client.list_categories()[1]['categories'][0]
-
-    def setUp(self):
-        super(TestRepository, self).setUp()
-
-        packages_list = self.client.get_list_packages()[1]
-        for package in packages_list['packages']:
-            if 'Dummy' in package['fully_qualified_name']:
-                self.client.delete_package(package['id'])
-        self.package = self.client.upload_package(
-            'testpackage',
-            {"categories": [self.categorie], "tags": ["windows"]}).json()
-        self.packages.append(self.package)
-
-    @attr(type='smoke')
-    def test_get_package(self):
-        resp, body = self.client.get_package(self.package['id'])
-
-        self.assertEqual(200, resp.status)
-        self.assertEqual(self.package['tags'], body['tags'])
-
-    @attr(type='smoke')
-    def test_update_package(self):
-        post_body = [
-            {
-                "op": "add",
-                "path": "/tags",
-                "value": ["im a test"]
-            }
-        ]
-
-        resp, body = self.client.update_package(self.package['id'], post_body)
-
-        self.assertEqual(200, resp.status)
-        self.assertIn("im a test", body['tags'])
-
-        post_body = [
-            {
-                "op": "replace",
-                "path": "/tags",
-                "value": ["im bad:D"]
-            }
-        ]
-
-        resp, body = self.client.update_package(self.package['id'], post_body)
-
-        self.assertEqual(200, resp.status)
-        self.assertNotIn("im a test", body['tags'])
-        self.assertIn("im bad:D", body['tags'])
-
-        post_body = [
-            {
-                "op": "remove",
-                "path": "/tags",
-                "value": ["im bad:D"]
-            }
-        ]
-
-        resp, body = self.client.update_package(self.package['id'], post_body)
-
-        self.assertEqual(200, resp.status)
-        self.assertNotIn("im bad:D", body['tags'])
-
-        post_body = [
-            {
-                "op": "replace",
-                "path": "/is_public",
-                "value": True
-            }
-        ]
-
-        resp, body = self.client.update_package(self.package['id'], post_body)
-
-        self.assertEqual(200, resp.status)
-        self.assertTrue(body['is_public'])
-
-        post_body = [
-            {
-                "op": "replace",
-                "path": "/enabled",
-                "value": True
-            }
-        ]
-
-        resp, body = self.client.update_package(self.package['id'], post_body)
-
-        self.assertEqual(200, resp.status)
-        self.assertTrue(body['enabled'])
-
-        post_body = [
-            {
-                "op": "replace",
-                "path": "/description",
-                "value": "New description"
-            }
-        ]
-
-        resp, body = self.client.update_package(self.package['id'], post_body)
-
-        self.assertEqual(200, resp.status)
-        self.assertEqual("New description", body['description'])
-
-        post_body = [
-            {
-                "op": "replace",
-                "path": "/name",
-                "value": "New name"
-            }
-        ]
-
-        resp, body = self.client.update_package(self.package['id'], post_body)
-
-        self.assertEqual(200, resp.status)
-        self.assertEqual("New name", body['name'])
-
-    @attr(type='smoke')
-    def test_download_package(self):
-        resp = self.client.download_package(self.package['id'])[0]
-
-        self.assertEqual(200, resp.status)
-
-    @attr(type='smoke')
-    def test_get_ui_definitions(self):
-        resp = self.client.get_ui_definition(self.package['id'])[0]
-
-        self.assertEqual(200, resp.status)
-
-    @attr(type='smoke')
-    def test_get_logo(self):
-        resp, body = self.client.get_logo(self.package['id'])
-
-        self.assertEqual(200, resp.status)
-        self.assertTrue(isinstance(body, str))
--- murano-2015.1~b1.orig/murano/tests/functional/cli/simple_read_only/test_murano.py
+++ /dev/null
@@ -1,129 +0,0 @@
-# Copyright (c) 2014 Mirantis, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License"); you may
-# not use this file except in compliance with the License. You may obtain
-# a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-# License for the specific language governing permissions and limitations
-# under the License.
-
-import time
-import uuid
-
-from murano.tests.functional.cli import muranoclient
-
-
-class SimpleReadOnlyMuranoClientTest(muranoclient.ClientTestBase):
-    """Basic, read-only tests for Murano CLI client.
-
-    Basic smoke test for the Murano CLI commands which do not require
-    creating or modifying murano objects.
-    """
-
-    @classmethod
-    def setUpClass(cls):
-        super(SimpleReadOnlyMuranoClientTest, cls).setUpClass()
-
-    def test_environment_list(self):
-        environments = self.listing('environment-list')
-
-        self.assertTableStruct(environments,
-                               ['ID', 'Name', 'Created', 'Updated'])
-
-    def test_package_list(self):
-        packages = self.listing('package-list')
-
-        self.assertTableStruct(packages,
-                               ['ID', 'Name', 'FQN', 'Author', 'Is Public'])
-
-    def test_category_list(self):
-        self.murano('category-list')
-
-    def test_table_struct_of_environment_create(self):
-        env_name = "gg" + uuid.uuid4().hex
-        environment = self.listing('environment-create', params=env_name)
-
-        self.assertTableStruct(environment,
-                               ['ID', 'Name', 'Created', 'Updated'])
-
-    def test_table_struct_of_environment_delete(self):
-        env_name = "gg" + uuid.uuid4().hex
-        environment = self.listing('environment-create', params=env_name)
-
-        ID = self.get_value('ID', 'Name', env_name, environment)
-
-        delete_env = self.listing('environment-delete', params=ID)
-
-        self.assertTableStruct(delete_env,
-                               ['ID', 'Name', 'Created', 'Updated'])
-
-
-class EnvironmentMuranoClientTest(muranoclient.ClientTestBase):
-
-    @classmethod
-    def setUpClass(cls):
-        super(EnvironmentMuranoClientTest, cls).setUpClass()
-
-    def test_environment_create(self):
-        env_name = "gg" + uuid.uuid4().hex
-        environment = self.listing('environment-create', params=env_name)
-
-        environment_list = self.listing('environment-list')
-
-        self.assertIn(env_name, [env['Name'] for env in environment])
-        self.assertIn(env_name, [env['Name'] for env in environment_list])
-
-    def test_environment_delete(self):
-        env_name = "gg" + uuid.uuid4().hex
-        environments = self.listing('environment-create', params=env_name)
-
-        ID = self.get_value('ID', 'Name', env_name, environments)
-
-        self.listing('environment-delete', params=ID)
-
-        start_time = time.time()
-        while env_name in [env['Name']
-                           for env in self.listing('environment-list')]:
-            if start_time - time.time() > 60:
-                self.fail("Environment is not deleted in 60 seconds")
-
-    def test_environment_show(self):
-        env_name = "gg" + uuid.uuid4().hex
-        environment = self.listing('environment-create', params=env_name)
-
-        ID = self.get_value('ID', 'Name', env_name, environment)
-
-        created = self.get_value('Created', 'Name', env_name, environment)
-        updated = self.get_value('Updated', 'Name', env_name, environment)
-
-        show_env = self.listing('environment-show', params=ID)
-
-        self.assertEqual(env_name, self.get_value('Value', 'Property', 'name',
-                                                  show_env))
-        self.assertEqual(created, self.get_value('Value', 'Property',
-                                                 'created', show_env))
-        self.assertEqual(updated, self.get_value('Value', 'Property',
-                                                 'updated', show_env))
-
-    def test_environment_rename(self):
-        env_name = "gg" + uuid.uuid4().hex
-        environment = self.listing('environment-create', params=env_name)
-
-        ID = self.get_value('ID', 'Name', env_name, environment)
-
-        new_name = "renamed" + uuid.uuid4().hex
-        rename_env = self.listing('environment-rename',
-                                  params='{id} {name}'.format(id=ID,
-                                                              name=new_name))
-
-        show_env = self.listing('environment-show', params=ID)
-
-        self.assertEqual(new_name, self.get_value('Name', 'ID', ID,
-                                                  rename_env))
-        self.assertEqual(new_name, self.get_value('Value', 'Property', 'name',
-                                                  show_env))
