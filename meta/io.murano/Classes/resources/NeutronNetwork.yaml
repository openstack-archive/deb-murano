Namespaces:
  =: io.murano.resources
  std: io.murano
  sys: io.murano.system

Name: NeutronNetwork

Extends: NeutronNetworkBase

Properties:
  name:
    Contract: $.string().notNull()

  externalRouterId:
    Contract: $.string()
    Usage: InOut

  autoUplink:
    Contract: $.bool().notNull()
    Default: true

  autogenerateSubnet:
    Contract: $.bool().notNull()
    Default: true

  subnetCidr:
    Contract: $.string()
    Usage: InOut

  dnsNameserver:
    Contract: $.string()
    Usage: InOut

  useDefaultDns:
    Contract: $.bool().notNull()
    Default: true

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()
      - $._netExplorer: new(sys:NetworkExplorer)


  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - If: $.useDefaultDns and (not bool($.dnsNameserver))
            Then:
              - $.dnsNameserver: $._netExplorer.getDefaultDns()

          - $template: $._createNetwork()
          - If: $.autoUplink and (not bool($.externalRouterId))
            Then:
              - $.externalRouterId: $._netExplorer.getDefaultRouter()
          - If: $.autogenerateSubnet and (not bool($.subnetCidr))
            Then:
              - $.subnetCidr: $._netExplorer.getAvailableCidr($.externalRouterId, $.id())

          - $template: $template.mergeWith($._createSubnet())
          - If: $.externalRouterId != null
            Then:
              - $template: $template.mergeWith($._createRouterInterface())

          - $._environment.stack.updateTemplate($template)
          - $._environment.stack.push()
          - $.setAttr(deployed, true)


  _createNetwork:
    Body:
      - Return:
          resources:
            $._getNetworkName():
              type: 'OS::Neutron::Net'
              properties:
                name: format('{0}-{1}', $.name, $.id())


  _createSubnet:
    Body:
      - Return:
          resources:
            $._getSubnetName():
              type: 'OS::Neutron::Subnet'
              properties:
                network: { get_resource: $._getNetworkName() }
                ip_version: 4
                dns_nameservers: [ $.dnsNameserver ]
                cidr: $.subnetCidr


  _createRouterInterface:
    Body:
      - Return:
          resources:
            $._getRouterInterfaceName():
              type: 'OS::Neutron::RouterInterface'
              properties:
                router_id: $.externalRouterId
                subnet: { get_resource: $._getSubnetName() }


  joinInstance:
    Arguments:
      - instance:
          Contract: $.class(Instance).notNull()
      - securityGroupName:
          Contract: $.string()
      - assignFloatingIp:
          Contract: $.bool().notNull()
      - sharedIps:
          Contract:
            - $.class(std:SharedIp)
    Body:
      - $.deploy()
      - $netRef: { get_resource: $._getNetworkName() }
      - $subnetRef: { get_resource: $._getSubnetName() }
      - $extNetId: null
      - $fipName: null
      - If: $assignFloatingIp
        Then:
          - $extNetId: $._getExternalNetId()
          - $fipName: format('fip-{0}-{1}', $.id(), $instance.name)

      - $result: $.joinInstanceToNetwork(
            instance => $instance,
            securityGroupName => $securityGroupName,
            sharedIps => $sharedIps,
            netRef => $netRef,
            subnetRef => $subnetRef,
            floatingIpResourceName => $fipName,
            floatingIpNeRef => $extNetId
          )

      # (sjmc7) This is a workaround for https://bugs.launchpad.net/heat/+bug/1299259
      - If: $externalRouterId != null
        Then:
          - $template:
              resources:
                $fipName:
                  depends_on:
                    - $._getRouterInterfaceName()
          - $result.template: $result.template.mergeWith($template)

      - Return: $result


  describe:
    Body:
      - $.deploy()
      - Return:
          provider: Neutron
          netRef:
            get_resource: $._getNetworkName()
          subnetRef:
            get_resource: $._getSubnetName()
          floatingIpNeRef: $._getExternalNetId()


  _getRouterInterfaceName:
    Body:
      Return: format('ri-{0}', $.id())


  _getNetworkName:
    Body:
      Return: format('network-{0}', $.id())


  _getSubnetName:
    Body:
      Return: format('subnet-{0}', $.id())


  _getExternalNetId:
    Body:
      Return: $._netExplorer.getExternalNetworkIdForRouter($.externalRouterId)
